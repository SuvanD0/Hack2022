# -*- coding: utf-8 -*-
"""machinelearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stMqRbFUGwDFuX1FyYZafEj5mx_OOPlj
"""

# Commented out IPython magic to ensure Python compatibility.
import pickle
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn import svm
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
# %matplotlib inline

df = pd.read_csv('/content/machinelearning - Sheet3.csv')
#need to use the csv file for a 10 row thing with mean values

df.head()

df.shape
df.info()
#df.isnull().sum()

df.shape

cutoffs = [0, .5, 1]
turbine_types = ['bad', 'good']
df['quality'] = pd.cut(df['quality'], bins = cutoffs, labels = turbine_types)
df['quality'].unique()

label_quality = LabelEncoder()

df['quality'] = label_quality.fit_transform(df['quality'])

df.head()

sns.countplot(df['quality'])

X = df.drop('quality', axis=1)
y = df['quality']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 42)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train[:10]

"""RANDOM FOREST CLASSIFIER

"""

rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict(X_test)

#predict_rfc[:20]
#how well did model do
print(classification_report(y_test, pred_rfc))
print(confusion_matrix(y_test, pred_rfc))

"""SVM CLASSIFIER"""

clf = svm.SVC()
clf.fit(X_train, y_train)
pred_clf = clf.predict(X_test)

print(classification_report(y_test, pred_clf))
print(confusion_matrix(y_test, pred_clf))

# PRINT ACCURACY
# from sklearn.metrics import accuracy_score
# cm = accuracy_score(y_test,pred_rfc)
# print(cm)

# Xnew = []
# Xnew = sc.transform(Xnew)
# ynew = rfc.predict(Xnew)
# ynew

"""NEUTRAL NETWORK"""

mlpc=MLPClassifier(hidden_layer_sizes=(11,11,11),max_iter=500)
mlpc.fit(X_train, y_train)
pred_mlpc = mlpc.predict(X_test)

print(classification_report(y_test, pred_mlpc))
print(confusion_matrix(y_test, pred_mlpc))